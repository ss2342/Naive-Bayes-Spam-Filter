# -*- coding: utf-8 -*-
"""Bayes Spam Filter using Sckit-learn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-ewBv_0VKCcKdK8CnVgCjjfMJAkmDmGo

# Notebook Imports
"""

import numpy as np
import pandas as pd

# will allow us to generate list of words very quickly
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, f1_score

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

from google.colab import drive
drive.mount('/content/drive')

"""# Constants"""

DATA_JSON_FILE = '/content/drive/MyDrive/Machine Learning /Naive Bayes Spam Filter/SpamData/01_Processing/email-text-data.json'

"""# Import Data"""

data = pd.read_json(DATA_JSON_FILE)

data.head()

data.tail()

data.sort_index(inplace=True) # sort indices in increasing order

data.tail()

"""# Use Scikit learn to create our features sparse matrix and vocabulary"""

vectorizer = CountVectorizer(stop_words='english')

# recall individual words were features
all_features = vectorizer.fit_transform(data.MESSAGE)

all_features.shape # columns correspond to our individual words

# vectorizer will generate vocabulary for us

vectorizer.vocabulary_

"""# Create our Training and Test Data"""

X = all_features # features we will use to predict - independent variables 
y = data.CATEGORY # what we are predicting - dependent variable

# split our data
X_train, X_test, y_train, y_test = train_test_split(X, 
                                                    y,
                                                    test_size=0.3,
                                                    random_state=88)

X_train.shape

X_test.shape

"""# Train Our Model"""

classifier = MultinomialNB()

classifier.fit(X_train, y_train)

"""# Predictions of Our model"""

y_pred = classifier.predict(X_test)
y_test = np.array(y_test)
compare_results = np.concatenate(
    (y_pred.reshape(len(y_pred), 1), 
     y_test.reshape(len(y_test), 1)),
     1)

compare_results[:100]

"""# Making our Confusion Matrix"""

conf_matrix = confusion_matrix(y_pred, y_test)

print(conf_matrix)

"""# Additional Metrics: Accuracy, Recall, Precision, and F-Score"""

accuracy = accuracy_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f_score = f1_score(y_test, y_pred)

print("Accuracy of Bayes Classifier with scikit-learn is {:.2%}".format(accuracy))
print("Recall score of Bayes Classifier with scikit-learn is {:.2%}".format(recall))
print("Precision of Bayes Classifier with scikit-learn is {:.2%}".format(precision))
print("F-Score of Bayes Classifier with scikit-learn is {:.2}".format(f_score))